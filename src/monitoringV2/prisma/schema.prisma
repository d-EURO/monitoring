generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Raw blockchain events - all protocol events across all contracts
model RawEvent {
  blockNumber     Int      @map("block_number")
  txHash          String   @map("tx_hash") @db.VarChar(66)
  logIndex        Int      @map("log_index")
  contractAddress String   @map("contract_address") @db.VarChar(42)
  topic           String   @db.VarChar(100)
  args            Json     @db.JsonB
  timestamp       DateTime @db.Timestamptz

  @@id([txHash, logIndex])
  @@index([blockNumber(sort: Desc)], map: "idx_events_block")
  @@index([topic, timestamp(sort: Desc)], map: "idx_events_name_time")
  @@index([contractAddress, blockNumber(sort: Desc)], map: "idx_events_contract")
  @@index([timestamp(sort: Desc)], map: "idx_events_timestamp")
  @@map("raw_events")
}

// Single-row table tracking blockchain sync progress
model SyncState {
  id                 Int      @id @default(1)
  lastProcessedBlock Int      @map("last_processed_block")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  @@map("sync_state")
}

// Contract registry - tracks all known protocol contracts
model Contract {
  address        String   @id @db.VarChar(42)
  type           String   @db.VarChar(50)
  createdAtBlock Int      @map("created_at_block")
  metadata       Json?    @db.JsonB
  isActive       Boolean  @default(true) @map("is_active")
  addedAt        DateTime @default(now()) @map("added_at") @db.Timestamptz

  @@index([type], map: "idx_contracts_type")
  @@index([isActive], map: "idx_contracts_active")
  @@map("contracts")
}

// Token registry
model Token {
  address        String    @id @db.VarChar(42)
  symbol         String?   @db.VarChar(20)
  name           String?   @db.VarChar(100)
  decimals       Int?
  price          Decimal?  @db.Decimal(20, 8)
  priceUpdatedAt DateTime? @map("price_updated_at") @db.Timestamptz
  addedAt        DateTime  @default(now()) @map("added_at") @db.Timestamptz

  @@index([symbol], map: "idx_tokens_symbol")
  @@map("tokens")
}

// Position states - tracks all position contract states
model PositionState {
  // Fixed fields
  address               String    @id @db.VarChar(42)
  limit                 Decimal   @map("limit") @db.Decimal(78, 0)
  owner                 String    @db.VarChar(42)
  original              String    @db.VarChar(42)
  collateral            String    @db.VarChar(42)
  minimumCollateral     Decimal   @map("minimum_collateral") @db.Decimal(78, 0)
  riskPremiumPpm        Int       @map("risk_premium_ppm")
  reserveContribution   Int       @map("reserve_contribution")
  challengePeriod       Decimal   @map("challenge_period") @db.Decimal(78, 0)
  startTimestamp        Decimal   @map("start_timestamp") @db.Decimal(78, 0)
  expiration            Decimal   @db.Decimal(78, 0)
  created               DateTime? @db.Timestamptz // When position was opened

  // Dynamic fields
  price                 Decimal   @db.Decimal(78, 0)
  virtualPrice          Decimal   @map("virtual_price") @db.Decimal(78, 0)
  collateralAmount      Decimal   @map("collateral_amount") @db.Decimal(78, 0)
  expiredPurchasePrice  Decimal   @map("expired_purchase_price") @db.Decimal(78, 0)
  collateralRequirement Decimal   @map("collateral_requirement") @db.Decimal(78, 0)
  principal             Decimal   @db.Decimal(78, 0)
  interest              Decimal   @db.Decimal(78, 0)
  debt                  Decimal   @db.Decimal(78, 0)
  fixedAnnualRatePpm    Int       @map("fixed_annual_rate_ppm")
  lastAccrual           Decimal   @map("last_accrual") @db.Decimal(78, 0)
  cooldown              Decimal   @db.Decimal(78, 0)
  challengedAmount      Decimal   @map("challenged_amount") @db.Decimal(78, 0)
  availableForMinting   Decimal   @map("available_for_minting") @db.Decimal(78, 0)
  availableForClones    Decimal   @map("available_for_clones") @db.Decimal(78, 0)
  isClosed              Boolean   @map("is_closed")

  // Metadata
  timestamp             DateTime @db.Timestamptz

  @@index([owner], map: "idx_position_states_owner")
  @@index([original], map: "idx_position_states_original")
  @@index([collateral], map: "idx_position_states_collateral")
  @@index([isClosed], map: "idx_position_states_is_closed")
  @@map("position_states")
}
